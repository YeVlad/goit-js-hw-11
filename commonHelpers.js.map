{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["// Описаний у документації\nimport iziToast from 'izitoast';\n// Додатковий імпорт стилів\nimport 'izitoast/dist/css/iziToast.min.css';\n\nexport async function doFetch(aim, textToWait) {\n  const API_KEY = '16991331-df0a6792d36af314f174a3b15';\n  const url = 'https://pixabay.com/api/';\n\n  const params = new URLSearchParams({\n    key: API_KEY,\n    q: aim,\n    image_type: 'photo',\n    orientation: 'horizontal',\n    safesearch: true,\n    per_page: 9,\n  });\n\n  textToWait.style.borderColor = 'black';\n  textToWait.style.borderBottomColor = 'transparent';\n\n  return fetch(`${url}?${params}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      return response.json();\n    })\n\n    .catch(error => {\n      iziToast.show({\n        title: 'Ops.',\n        titleColor: 'white',\n        message: error,\n        messageColor: 'white',\n        color: 'red',\n        position: 'topCenter',\n        timeout: '5000',\n      });\n    });\n}\n","export function makeGallery(getedObject) {\n  const neccesaryArray = getedObject.hits;\n  return neccesaryArray\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => `\n        <li class=\"card\">\n            <div class=\"place-for-image\">\n                <a href=\"${largeImageURL}\">\n                    <img src=\"${webformatURL}\" alt=\"${tags}\" class=\"picture\"/>\n                </a>\n            </div>\n            <div class=\"info-text\">\n                <div class=\"description\">\n                    <span class=\"bold-text\">Likes</span>\n                    <span class=\"info-value\">${likes}</span>\n                </div>\n                <div class=\"description\">\n                    <span class=\"bold-text\">Views</span>\n                    <span class=\"info-value\">${views}</span>\n                </div>\n                <div class=\"description\">\n                    <span class=\"bold-text\">Comments</span>\n                    <span class=\"info-value\">${comments}</span>\n                </div>\n                <div class=\"description\">\n                    <span class=\"bold-text\">Downloads</span>\n                    <span class=\"info-value\">${downloads}</span>\n                </div>\n            </div>\n        </li>`\n    )\n    .join('');\n}\n","import { doFetch } from './js/pixabay-api';\n\nimport { makeGallery } from './js/render-functions';\n\nimport SimpleLightbox from 'simplelightbox';\n\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nimport iziToast from 'izitoast';\n\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('.form-search');\nconst loader = document.querySelector('.loader');\nloader.style.borderColor = 'white';\nloader.style.borderBottomColor = 'transparent';\nconst photoGallery = document.querySelector('.images-place');\n\nconst book = new SimpleLightbox('.card .place-for-image a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\nform.addEventListener('submit', handleSearch);\n\nasync function handleSearch(event) {\n  event.preventDefault();\n  photoGallery.innerHTML = '';\n  const searchWord = event.currentTarget.elements.inputSearch.value;\n  await doFetch(searchWord, loader, photoGallery)\n    .then(data => {\n      if (data.total == 0) {\n        iziToast.show({\n          title: 'Ops.',\n          titleColor: 'white',\n          message:\n            'Sorry, there are no images matching your search query. Please try again!',\n          messageColor: 'white',\n          color: 'red',\n          position: 'topCenter',\n          timeout: '5000',\n        });\n\n        throw new Error(data.status);\n      }\n      return makeGallery(data);\n    })\n    .then(newGallery => {\n      photoGallery.insertAdjacentHTML('beforeend', newGallery);\n      book.refresh();\n    })\n    .finally(() => {\n      loader.style.borderColor = 'white';\n      loader.style.borderBottomColor = 'transparent';\n    });\n}\n"],"names":["doFetch","aim","textToWait","API_KEY","url","params","response","error","iziToast","makeGallery","getedObject","webformatURL","largeImageURL","tags","likes","views","comments","downloads","form","loader","photoGallery","book","SimpleLightbox","handleSearch","event","searchWord","data","newGallery"],"mappings":"6vBAKO,eAAeA,EAAQC,EAAKC,EAAY,CAC7C,MAAMC,EAAU,qCACVC,EAAM,2BAENC,EAAS,IAAI,gBAAgB,CACjC,IAAKF,EACL,EAAGF,EACH,WAAY,QACZ,YAAa,aACb,WAAY,GACZ,SAAU,CACd,CAAG,EAED,OAAAC,EAAW,MAAM,YAAc,QAC/BA,EAAW,MAAM,kBAAoB,cAE9B,MAAM,GAAGE,CAAG,IAAIC,CAAM,EAAE,EAC5B,KAAKC,GAAY,CAChB,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAMA,EAAS,MAAM,EAEjC,OAAOA,EAAS,MACtB,CAAK,EAEA,MAAMC,GAAS,CACdC,EAAS,KAAK,CACZ,MAAO,OACP,WAAY,QACZ,QAASD,EACT,aAAc,QACd,MAAO,MACP,SAAU,YACV,QAAS,MACjB,CAAO,CACP,CAAK,CACL,CCxCO,SAASE,EAAYC,EAAa,CAEvC,OADuBA,EAAY,KAEhC,IACC,CAAC,CACC,aAAAC,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IAAY;AAAA;AAAA;AAAA,2BAGeL,CAAa;AAAA,gCACRD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAMXC,CAAK;AAAA;AAAA;AAAA;AAAA,+CAILC,CAAK;AAAA;AAAA;AAAA;AAAA,+CAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,+CAIRC,CAAS;AAAA;AAAA;AAAA,cAInD,EACA,KAAK,EAAE,CACZ,CC5BA,MAAMC,EAAO,SAAS,cAAc,cAAc,EAC5CC,EAAS,SAAS,cAAc,SAAS,EAC/CA,EAAO,MAAM,YAAc,QAC3BA,EAAO,MAAM,kBAAoB,cACjC,MAAMC,EAAe,SAAS,cAAc,eAAe,EAErDC,EAAO,IAAIC,EAAe,2BAA4B,CAC1D,aAAc,MACd,aAAc,GAChB,CAAC,EAEDJ,EAAK,iBAAiB,SAAUK,CAAY,EAE5C,eAAeA,EAAaC,EAAO,CACjCA,EAAM,eAAc,EACpBJ,EAAa,UAAY,GACzB,MAAMK,EAAaD,EAAM,cAAc,SAAS,YAAY,MAC5D,MAAMxB,EAAQyB,EAAYN,CAAoB,EAC3C,KAAKO,GAAQ,CACZ,GAAIA,EAAK,OAAS,EAChB,MAAAlB,EAAS,KAAK,CACZ,MAAO,OACP,WAAY,QACZ,QACE,2EACF,aAAc,QACd,MAAO,MACP,SAAU,YACV,QAAS,MACnB,CAAS,EAEK,IAAI,MAAMkB,EAAK,MAAM,EAE7B,OAAOjB,EAAYiB,CAAI,CAC7B,CAAK,EACA,KAAKC,GAAc,CAClBP,EAAa,mBAAmB,YAAaO,CAAU,EACvDN,EAAK,QAAO,CAClB,CAAK,EACA,QAAQ,IAAM,CACbF,EAAO,MAAM,YAAc,QAC3BA,EAAO,MAAM,kBAAoB,aACvC,CAAK,CACL"}